import {App, TFile} from "obsidian";
import yaml from "js-yaml";

export async function refreshFrontmatter(file: TFile, app:App) {
  const content = await app.vault.cachedRead(file);
  const metadata = app.metadataCache.getFileCache(file);
  const frontmatter = metadata?.frontmatter ? { ...metadata.frontmatter } : {};
  const frontmatterString = yaml.dump(frontmatter);
  const newContent = `---\n${frontmatterString}---\n${content.replace(/^-{3}[\s\S]+?-{3}\n/, '')}`;
  await app.vault.modify(file, newContent);
}

// clear frontmatter field generated by this plugin
export async function clearPluginFrontmatter(file: TFile, app:App) {
  const content = await app.vault.cachedRead(file);
  const metadata = app.metadataCache.getFileCache(file);
  const frontmatter = metadata?.frontmatter ? { ...metadata.frontmatter } : {};
  const frontmatterString = yaml.dump(frontmatter);
  const newContent = `---\n${frontmatterString}---\n${content.replace(/^-{3}[\s\S]+?-{3}\n/, '')}`;
  await app.vault.modify(file, newContent);
}

export async function addDataToFrontmatter(file: TFile, app:App, newData: Record<string, any>) {
  const content = await file.vault.cachedRead(file);
  const metadata = app.metadataCache.getFileCache(file);
  let frontmatter = metadata?.frontmatter ? { ...metadata.frontmatter } : {};
  if(frontmatter) frontmatter = { ...frontmatter, ...newData };
  const frontmatterString = yaml.dump(frontmatter);
  const newContent = `---\n${frontmatterString}---\n${content.replace(/^-{3}[\s\S]+?-{3}\n/, '')}`;
  await app.vault.modify(file, newContent);
}